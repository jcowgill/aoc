#[derive(Clone, Copy, Debug, Eq, PartialEq)]
enum Token {
    Num(u8),
    Add,
    Mul,
    Open,
    Close,
}

fn parse(line: &str) -> impl Iterator<Item = Token> + '_ {
    line.chars()
        .filter(|&c| !c.is_ascii_whitespace())
        .map(|c| match c {
            '0'..='9' => Token::Num(c as u8 - b'0'),
            '+' => Token::Add,
            '*' => Token::Mul,
            '(' => Token::Open,
            ')' => Token::Close,
            _ => panic!("invalid character {c}"),
        })
}

fn pop_ops(values: &mut Vec<u64>, ops: &mut Vec<Token>, pop_mul: bool) {
    loop {
        let f = match ops.last() {
            Some(Token::Add) => |a, b| a + b,
            Some(Token::Mul) if pop_mul => |a, b| a * b,
            _ => return,
        };

        ops.pop();
        let v2 = values.pop().unwrap();
        let v1 = values.last_mut().unwrap();
        *v1 = f(*v1, v2);
    }
}

fn evaluate(line: &str, add_precedence: bool) -> u64 {
    let mut values = Vec::new();
    let mut ops = Vec::new();

    for t in parse(line) {
        match t {
            Token::Num(n) => values.push(n.into()),
            Token::Open => ops.push(t),
            Token::Add => {
                pop_ops(&mut values, &mut ops, !add_precedence);
                ops.push(t);
            }
            Token::Mul => {
                pop_ops(&mut values, &mut ops, true);
                ops.push(t);
            }
            Token::Close => {
                pop_ops(&mut values, &mut ops, true);
                assert_eq!(ops.pop(), Some(Token::Open));
            }
        }
    }

    pop_ops(&mut values, &mut ops, true);
    assert!(ops.is_empty());
    assert_eq!(values.len(), 1);
    values[0]
}

fn run(input: &str, add_precedence: bool) -> String {
    input
        .lines()
        .map(|l| evaluate(l, add_precedence))
        .sum::<u64>()
        .to_string()
}

pub fn star1(input: &str) -> String {
    run(input, false)
}

pub fn star2(input: &str) -> String {
    run(input, true)
}

#[cfg(test)]
mod test {
    use super::*;
    use indoc::indoc;

    star_test!(example1a, star1, IN1, "26457");
    star_test!(me1, star1, ME, "36382392389406");

    star_test!(example1b, star2, IN1, "694173");
    star_test!(me2, star2, ME, "381107029777968");

    const IN1: &str = indoc! {"
        1 + 2 * 3 + 4 * 5 + 6
        1 + (2 * 3) + (4 * (5 + 6))
        2 * 3 + (4 * 5)
        5 + (8 * 3 + 9 + 3 * 4 * 3)
        5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
        ((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2
    "};

    const ME: &str = indoc! {"
        2 + ((6 * 6 + 4 + 3 * 4) + (4 + 3 + 5) * 3 * (5 * 6 + 5 * 3 + 6)) * 2 + 3 * (6 * (4 + 4 * 4) * 2 * 3 * 8)
        6 * 3 + 5 * ((9 * 9 + 3) + (2 + 5 * 6 + 4)) + 7 + 9
        7 * 3 + 8 + 8 * 4 * (4 * (7 * 4) + 9 * 5)
        3 * 4 + 8 + 5
        8 + (8 + (3 + 6) * 9 + 9 * 5) * ((5 + 9 * 7 * 3) * 4 * 5) + 6 + 9
        ((2 * 9 + 4 + 5) * 5) + 2
        (4 * 8 * 5 * 7) * 2 * ((3 + 9 + 8) * 9 * 8)
        (8 + 4 * 8) + (4 + 8 * 8) + 5 + 6
        8 * (9 * 6 * 2 + (8 + 8 * 3 + 8 + 8) * 7 * (8 * 9 + 8 * 5 * 4 * 8)) + 8 * 2
        7 * 3 + 5 + (4 + (9 * 2 + 6 + 8) + 4 + 2)
        9 * 3 + 3 + (7 * 2 + 2)
        3 + 2 * (3 + 4 + 4 + 7) + 8 * (4 * (8 * 8 * 2 + 3 + 9 * 8))
        7 + (4 + 2 * 5 + 7) * (9 * 9 * 4 + (9 * 4) + (9 + 2 * 7 * 3 * 9) + (3 * 7)) * ((5 + 6) * 6 + (8 + 7 + 5 + 8) + 6) + 8
        ((4 + 6 + 3 * 2 + 6) + 2) * (8 + 5 * 5 * 6 + 4)
        5 * 2 + 7 * ((6 + 8 + 2 * 9 + 5 * 2) + 6 + (5 * 9) * (4 * 3 * 5))
        7 + (3 + (2 + 8 * 4 + 4 + 8 * 7) + 5) * 3 * 3
        (5 + 8 * (2 + 5 * 3 * 9 * 6)) * 7
        (8 + (9 + 5 + 7 + 4 * 7 + 4) + 5) * (9 + 4 * 4 * 3 + 5 * 5) + 7
        7 * ((3 * 8 * 8 + 6 * 6) + (7 * 7 * 3 + 2) + 7 + 2 * 9 * 7)
        (8 * 5 * 9 * 9 * (4 + 9) * 9) + (8 * 4 * (2 + 6)) + 8 * 9 * 2 * 4
        8 + 5 + ((6 * 7) * 6 + 7 * 8) + 8 + 2
        4 + (3 * 6)
        (3 + 9 + (4 * 7 * 8 + 8 + 2)) + 2 * 4
        9 * (9 * 7) + 3 + 5 + (4 + 8) * 5
        4 * 4 + 8 * (7 * 2 + 8 + 5 + (3 * 2 + 7 + 9)) + 5
        (8 + 5 * (6 + 3 + 6 * 9 + 8 * 2) + 8 + (5 + 3 * 8 * 6 + 3) * 6) * ((3 * 5 * 2) * (6 * 7) + 2) * 4 + (8 * 2 + 8 * 5)
        (4 + 5 * 5) + 5 * 9 * 5 * ((2 * 4 + 2 + 7 + 8 + 4) + 7 + 7) * 2
        8 * (6 * 9 + 3 * 3 * 6) + 4
        ((8 * 5 * 8) * 9 * 4 + 3) + 6 * 4 * 9 + 3
        5 * 3 * (8 + 2 + 2)
        8 + 3 + 2 * (5 + (4 * 6 * 8) + (4 + 8) + 2 + 5 + (6 + 3))
        2 + ((5 * 5 * 4) * 9 + 3 + 4 * 4 * 4) + 2 + 9
        3 * 2 * 8 * (2 * 6) * 4
        3 + 9 + (5 + 2 * 4 * 4 + 8) * 3 * 6 + (4 + 7)
        2 + (9 + 9 * 6 + 9 * 9) + 2 + 2
        5 * ((6 + 7 + 3 + 9) * 3 + 5 + 3 * 4 + (4 * 6 * 9)) + 2
        (8 + (3 + 5) + 7 * (2 * 4 * 4 + 8 + 2 * 4) * 5) * 6 + 5 * 2
        6 * 4 + 4 + ((8 + 9) + 3 + 4 + 7) + 4
        (5 + 4 * 5 * 4 + 5) * 6 * (6 + 5 + 8 + 7 * 5)
        3 * (5 + 8 + 2)
        ((4 + 7 * 7 * 4 + 7) + (3 + 5 + 6 * 3 * 7 * 9) * 9 + 4 * 5 * 3) + 2 * (2 + 2 * 2 * 6 * (7 + 8 + 7) * (7 * 7 * 8 * 6 + 5)) * 3 * 7
        5 + (8 * 7 + 4 * 7 * (5 + 3 * 8 + 8 * 2)) + 2
        (9 + 7) * 5 + 9 * ((6 * 6 + 7 * 2 + 9 * 6) * 6 * 5 * 7)
        3 * 9 + 9 + (9 + 3 * 9 + (6 + 2 * 9 + 8))
        3 * 5 + ((6 + 5 * 6 * 5 * 6) + 7)
        5 + 2 + (7 * 8 + 9 + 4 + 7 + 3) * (3 + 9 + 2 * 2 + 4)
        5 * 5 + 6 + ((4 + 7 + 7 + 2 + 7) * (6 * 4 + 9 * 9 * 7 + 3) + 6 + 6 * 3) + (7 * 2 + 6 + (2 + 8 + 4 * 4 + 3) + 3 * 3)
        ((7 + 4) + 5 * (5 * 9) + 2 + 8 + 2) * 5 + 3 + 8 + 7
        2 * (6 * 9 * 5) * 9 + 4 + 7
        5 + (7 + 9 + (6 * 6 * 7) * 7 + 9 * 4) + 8 + ((2 * 9) * 8) + 8
        (9 * 7 * (2 * 9 + 2 * 5) + 3 + 6) * 5 + 8 * 7 + 4 * 8
        ((7 + 2 * 5) + 5 * 3 + 4 * 4) + 7 + 5 * (8 * 2) + ((9 * 6 + 2) * 7) * (9 + 3 + 7 * 8 * 7)
        (7 * (6 + 7 + 4 * 6 * 5) * 9) * 4 * (9 * 7 + (4 + 2 + 9 * 7) + 3)
        5 * (4 * 9 * 3 + 5 + 8) * 4 * 4 + 2 + (3 * 8 * 7 + 4 * 7 * 9)
        (3 + 4 * 5) * 5 + 7 * (3 + 3 * 9)
        (4 * 3 + (4 + 6) + 2 * 7) + (9 + 2 * 9 * (9 * 8)) + 8 + (2 * 9 + 7) * 3 * 8
        4 + (9 * 6 + (3 + 6 + 6 * 7 * 3)) + 8
        (6 * 9 * (4 * 4) * 6 + 5 + 3) + 6 + 6 + (6 * (6 * 5 + 4 * 7 * 8) * (4 * 4 + 3)) * 2
        (7 * 3 + 3 + 9) * (4 * 7 * 8 + 7) + (8 + 2 + 7 + (5 * 7 + 3) + 7) * (3 + 9) + 9 * (7 + 5 + 6 + 4 * 2)
        (8 + 6 + (4 * 7 * 6) * 2) + 4 * 5 * 8
        3 * 7 + (3 + 2) * (5 * (2 + 9 + 5 * 4 + 9 + 2) * 7 * 8) * 2
        9 * 9 * (6 + (4 + 3 + 9) + (9 + 5 * 3 + 6 * 7 * 4) * 8 * (8 * 4 + 8 * 7) + 9) + 8 * 4
        2 * (7 * (8 + 6 * 9 + 3 * 6 + 6) + 2) * 4
        7 + 4 * (7 * 7 + (8 + 2 * 4 + 5 * 9)) * (9 + 6 + 6) * 9 + 6
        3 * (8 + 4 * (9 + 6 * 5 + 8 + 9) * 5 * 6 * 3) * 5 + 4
        (5 + 4 * 9 + 6 + (4 + 6 + 4 + 4)) + 5 * 6 + 4 + 8
        9 + 3
        5 * (4 + 2) + 4 * (8 + 8 * 4 * (4 * 9) * 4)
        6 * (6 * 5 * 8 * 9) + (2 * 6 * 5 + 7 * 5)
        7 + 2 + ((5 + 7 + 5) + (4 * 9 + 4 + 7) * 8 * 9) + 8 * 6 + (9 * 5 * 2)
        8 * 7 * 8
        (8 + 6) + 5 + (7 * 3 + 8 * (6 + 7 + 9 + 8 * 3) + 9 * (3 + 7 * 5 * 9 * 3)) + 6
        5 + 6 + 3 + 9 * 6
        ((3 + 9) + 6 * 8 + 8) + 5 + 4
        (4 + (8 + 6) * (7 * 2 + 3) * 6) + 5 * (7 + 5 * 4) * (8 * 2 * 7) * 3 + 6
        4 * (4 + 4 * 2 + 3) * 5 * 6 + 6
        (4 * 4 + 9 + 7 + 4 + (9 + 6 * 7 * 4 + 4 + 8)) * 4 * 9 + 3
        8 * 3 * 6 * 9 * (6 + 3 * 8 + 5 * (2 + 2 + 9 + 6))
        (2 * 7 + (9 + 8 + 6 + 8) + 9 * (7 * 7 + 4 + 3 + 2)) * 3 + 3
        9 + 7 * (6 + 2 * 9 * (5 + 3 * 6 * 9 * 4) + (5 * 9 + 3 * 2 * 3 + 2))
        (5 + 7 * 2 + 9) * 7 + 8 + 8 + 5 + 2
        2 * 9 * (9 * 8 + 8 * 2 * 3 * 2) * ((8 + 9 * 6 * 6) * 6) * 3
        (8 + 4 * 6 + 5 * 7) + 3 + 6 + 6 * 8
        7 * 4 * 9 + (3 + 7 * 6 * 2 + 3 * 2) + 5
        4 + ((8 + 4 + 9 + 2) + 7 * (2 + 8 * 8))
        5 + 5 * (9 * 5 + (5 + 9 * 3 + 5 * 3 + 6)) * 8
        4 + (3 * 5 * 6 + 4) + 9 * (8 * (3 + 8 * 5 * 2))
        9 + (3 + (8 * 4 + 4) + 9 + 3) * (8 + 5 * (2 * 6) + 3 + 2 + 4) * 3 * 8 * 4
        2 * (9 * 3 * 5 + (5 + 7) * (8 + 3 * 6 * 3 * 9) * 8) * 8 + (5 + 2 + 6 + 8 + (8 + 9 * 5 * 7 * 8 * 4)) * 7 * (8 + 9 + (7 + 2) + 8)
        7 * 6 + (2 * 3) * 9 * 9
        8 + (7 + (9 + 8 * 5) * 5 + 8 + 3)
        (4 + 5 * 3 * 7 + (2 * 8 + 9 * 7 * 3) * 8) + 6 + 9 + ((5 + 9 + 2 * 2 * 5 * 3) + 4 + 9 * 5) * 4
        2 + 9 * (9 * 8 * 7 + 5 + 6 + 3) * 7
        7 * 6
        (4 + 7 + 9) * ((2 + 4 * 3 + 7 + 9 + 8) + 3 * 3 * 8 + (8 + 3 * 5 + 7 * 2 * 9)) * 9 * 2
        (7 * 6 * 7) + 4 + (4 * 6) * 6 * (6 * 6) * 9
        ((4 + 2 * 5 * 6 * 2) + 5 + 6 + (7 * 8) * 6 * 6) + 5 * 6 * 6 + 9 * 3
        (8 * 6 * 5) + 2 + 4
        (4 * (6 + 6 + 8 + 2 * 4 + 6) + 9 + (7 * 7)) + 5 * 2 + (9 * 2 * 2)
        6 + 3 * 5 + 8 + 3 * 5
        (5 * 5 + 2) * 5 + (3 + 3 * 8 + 2 + 7 * (5 + 8)) * 9
        (3 * (9 + 7 + 3 * 3 * 8) + 7) * 5 * 7 * 2
        (9 + 5) * 3 + 4
        4 + 2 * 6 * (2 * (2 + 3 * 6 * 2) * 9) * 6
        (6 + (3 * 8 * 2 * 2 + 4) * 7 * 6) * 9 + 3 * (2 * 9 * (3 * 3 * 6 + 2 * 4 + 2) * 3) + 2
        ((5 + 5) * 6 * 6 * (9 + 5 * 6 * 7 + 4 * 8) * 2 * 2) * (3 + 5 + 2 + (9 + 3 * 6 + 4) + (9 + 7 + 9))
        (8 * (8 * 7 * 7) * 9 + 9 + (6 * 5 * 3 + 8) * 3) + ((9 * 9 * 8 + 5 + 9) + 8 * 6)
        3 * 8 * (9 * 7) * 7
        (6 * (7 + 7 * 6 * 3) * 9 * 9 + 3 * 6) + 3 + 3 * 2 + 3 * 2
        4 * 6 * 8 * 4
        8 * (7 + 4 + (2 + 7 * 3 * 2 * 4))
        6 * ((3 + 6 * 2 * 7 * 7) + 9 + 9 + 9 + 6)
        2 * 4 * 3 * 8 + (5 + 7)
        (8 * (6 + 8) * 9 * 2 + 3) * 3 + 4 + 4
        (9 * 8) * 3 + 3 + 7 * 2 * (7 * 4 * 5 + 2)
        (4 * 6 * 3 * 5) + 3 * 9
        3 * 4 * (6 * 6 + 8 + 3)
        5 * ((4 * 4) + 6 + 8 * 9 + 2 * 4) * 3 * (4 + 4 + 8)
        8 + (8 + 3 + 7 * (9 + 4 * 5 + 3))
        8 * 8 + (3 * 8) * 6 + 3 * 4
        7 + 7 + (3 * 5 * 6 + 9 + 4 + 9) + 7 * (7 * 8)
        (2 * 7 + 6) * 4 * 9 * 4 * 5 * 9
        (8 * 8 + 6 * 7 + (7 * 7 + 8)) * (3 * 6 * 3 * (4 + 5 * 2 * 8 + 4 + 5))
        4 * (9 * (9 + 2 + 3) + 8)
        (4 * 7 * 8 * 6 + 7 * 2) + (6 * (2 + 7 * 9) + 7 + 9) * 9
        3 * (8 + 5) * 3 + 6 + (4 + 9 + 2 + (7 + 2 * 9 + 2)) + (9 * 8)
        7 * 7 + 4 * 9 + 7 + 5
        4 * (9 * 8 + 6) + 3 + 3 + 6 * 9
        4 + 9 * 8 * 2 * (2 * 6 * 3 * 5 + 8 * 8)
        9 * 6 + 4 + 6 + (9 + 5 * 3 + 3 + (4 * 7 * 3 * 7 + 5)) + 4
        9 + 2 + ((8 + 4 + 5 * 7 + 2 + 4) * 6 * (9 + 8) + 5 + 4 * (2 * 6 * 2 * 3 + 3))
        3 * (7 + 2 + 4 + 9 + 8 + 4) * (5 * 5 + 9) + 3 * 2
        4 * ((9 * 2 + 3 + 4 + 5) * 8 * 6 * 3 * 7) + 2 * (8 + (3 * 2 + 5 + 6 * 4 * 8) + 8)
        5 + (5 * 2 * 3 * 6) + (7 + (7 * 3 * 7) + 9 + 9 + 5 + 7) + 6
        8 * 3 + 6
        8 * 8
        2 * (3 + 5 + 4 + (8 + 5 + 6)) + 9 * 5
        (8 * 6 * 5 * 4 * 5) + 9 * (2 + (6 * 5 + 5 * 2) + (3 * 7 * 7 * 7 + 7) + 3 + 5) + (6 + 4 * 3 + 2) + (2 + 8 * 8)
        (6 * 3 * (2 * 2) + 3) * (5 * 2 * 5 * 2) * 7
        ((8 + 5) + 8 * 3 * (9 + 6 + 5 + 2 + 9 + 9)) + 6 + 9 * 6
        2 * (4 * 6 * 8) + (6 * 8 * 5 + (3 * 4 * 2 * 4)) * ((2 * 8 * 6) + 2 + 5) + (2 + 2)
        2 * 3 * 9 + 3 + 5
        6 + 2 + 7 * 5 + 8
        3 + 9 + 6 + 2 + 3 * 8
        3 + ((5 + 6 + 7) * 5 * 9 * 6 * 7) + 8
        7 * 6 * 9 * (7 * (8 * 4 * 8 + 2) * 3 * 8) + 8 + 5
        (2 * (4 + 5 + 6) * 7 + 9 * 9) + 7
        5 * 5
        (7 * 3 * (7 + 3 + 4 + 9 * 3) + (4 + 7 + 9 * 6) + 9) + (3 + (5 + 3 + 7) + 2) * 5 + ((8 + 2 + 7 * 7) * 4) + 8
        (5 * 8 + (9 * 6 * 2) * 9 + 8 + 6) + (2 * 9) * 8
        (9 * (3 + 3 * 3 * 2) * 7 * 3) + 3 + 5 * 7 * ((6 + 2 + 6 + 5 + 3 + 6) * 7 * 8 * 9 + 3 * 8) + 3
        9 * (3 * 9 + 9 + 8 + 3 * 7) + 8 + 9
        6 + ((9 * 9 + 6 + 6 * 7) * 7 + 7 + 8) * 8
        2 * 9 + (8 + 9 + 8 + 4 + 3 * 3) * (5 * 3 + 5 + 4 + 6 * 7) * (9 * 5 * 2 * 2 + 6 + 7)
        7 * 7 * ((4 * 8 + 3 + 9) + 4 * (2 + 4) + 9) * 6 + 5
        9 * (7 * 3) * 9 + 3 * 8 + (8 * 6)
        5 + ((9 * 9 + 9) + 8 * 4 * 5 + 8) * (5 + 4 * 6 * 2 * 9)
        3 * (6 * 4 + (6 * 9) + 5 * 6) + 9 + 9
        2 + 9 + ((5 * 4 + 5 + 5 * 7 * 5) * 5 * (5 * 6 * 9 * 9 + 8) * 7 * 5)
        5 * 6 * 2 + 4 * ((6 + 4 + 4 + 5 + 6) * (5 * 8 + 3 * 6) + 7 + (7 + 5 + 3) + 2 + 5) + 3
        5 * 6 + (6 + 3 + 5 * 6 * (6 + 7 + 6 + 9 * 5)) * 8
        ((5 * 6 * 2 * 8 * 3) + (5 + 8 + 5 + 4)) * 2 + 9
        5 * 4 + 4 + 7
        8 * 9 + (9 * 7 + 8 * 9) * (9 + 4 + 3 + 8 * 5) + 8 * 5
        4 * 6 * 2 + (6 + 4 * (7 + 5 + 9 * 5) + 5)
        (4 * 5 * 6 * 2 + 9) * 7 + (8 + (2 + 3 + 9 + 7 * 3 + 2) + (9 * 7) * 4 * 7 * 7) + 5 * 5 + 3
        3 + 2 + (4 * 7 * 4 * (2 * 3 + 7) * 8 + 4) * 4
        7 * (3 + 2 * 8 * (2 + 4 + 8 + 4 * 6))
        7 + (5 + 5) + 2
        (6 + (4 + 4)) + 2 + 5
        7 * 6 + ((9 * 5 * 6 * 4 + 9) * (9 * 4 + 8 * 2 + 9) + 8 + (2 * 6 + 4 + 2) * (3 + 9 * 2 + 7 * 5) * 3) + 6 + 6 * 4
        7 * 8 + 9 * (6 * 7 * 3 * 5) * 8 * 7
        (9 * 7 * (9 * 4)) + 7 * 8 * 5 * 5
        (5 * 3 + 8) * 5 * (9 + 6 + (8 * 5) * 8 + 5 + 6) + 8 * 2
        (8 * 4 * 7 * 2 + (7 + 5)) * 8 * 4 * (3 * (4 + 8) * 6 * 8 + 8 + 2)
        8 + 4 + 5 + (8 * 9 * 9 + 9 + 9) + 2 * (6 + 3 + 3 * 3)
        5 + ((6 * 5) + 8 + 6) + (9 + 9) * 5
        ((7 * 7) * (4 * 3 + 5 + 6) + (8 + 7) + 6 + 7) * 8 * (2 * 9 + 8) + 4 * 4
        (4 * 7 + (4 * 2 * 3 + 3 + 7 + 3) + 3) * (8 + 6 + 6 * (6 * 3 + 5)) + 2 + 7 + 8
        3 + 4 + 7 + (5 * 7 + 8 + 9) * (2 * 4 * 8 * 5) + 9
        8 + 4 + (9 * (9 * 7 * 8 * 5 * 7) * 4 + (7 * 4) * 2 + 2)
        6 + ((6 * 7 * 9 + 7 * 3) * 3 + 2 * 9 * (2 + 9 * 9 + 3 + 7))
        ((7 + 2 * 7 + 9) + (2 * 6) * (9 + 7 + 7 * 6)) + 9 * (2 + 9 + (3 + 7) + (7 * 4 + 4 * 4) * (8 + 6 + 7)) * 4
        4 * 4 * 6 * 6 + 7 * ((5 + 6) + 9 + 3 * 2 * 8)
        5 + 7 + (3 + 7 * (3 + 3) + 2) * 3
        3 * 3 + 2 * (9 * (6 * 4 * 4 + 6) + 8 * 4 * 9 * 4)
        ((3 + 7 * 4 * 4 * 5) + (2 * 7 * 4 + 5 + 4 * 6) + 5 + 4) * 2 + 4
        (8 + 8 + (5 * 3 + 4 * 2 * 2 + 5) * 5) + 4 * 3 + 6 + 6 * (2 + 6 + 4)
        (5 * (4 + 5 * 3 * 3 * 6) * 6) * (5 * 8)
        3 * 5 + (7 * 7 + 2 * 5 + (9 + 2 * 7 + 5 * 8 * 6) * 2)
        7 + ((2 * 7) * 2 * 8 * 3 * (6 + 9 + 3 + 5) * 9) + (4 * 2 * 8 + 2)
        5 * (9 + 3 + (9 * 2 + 4 + 9 * 2 + 4) * 6 * (2 * 3) + (5 * 9 * 2)) * (2 + (6 + 7 + 4 * 9 * 9 * 2) * 8 * (9 + 4)) + 2 * 5
        (6 + 2) + ((2 + 6 + 5) + 9 * 3 + 8) * 6 + 5
        ((9 * 2) * 7 * 4 * 3 * 8 * (2 + 7)) * ((8 + 2) + 8) * 3 + 5 * 7
        4 + 5 * (6 * 2 + 5 * (8 * 7 * 5) + 8 + (9 + 8)) + 3 + (5 * 4 + 8) * 2
        7 + 4 * 4
        3 + (5 + 2 + 8 + 4 + 6 + (2 + 5 * 5 * 3 * 8)) + ((7 + 7) * 6 + (5 * 2 + 9 * 4 + 2 * 5)) + 4 + (3 + 2 + 8 * (2 + 4 * 4 * 5)) + (5 + (6 * 7 * 6 * 7) * 3)
        6 + 4 + ((2 + 2 * 4) + 8) + 6 + (8 * 5 + (8 * 3 * 4 * 8 * 7) * 3)
        (2 + 7 + (3 * 9 + 8 + 3 + 5 + 5) + 4 + 2) * 9
        3 + 6 * 9 * (8 * 3 * 8 + (9 + 3) + 3 + 3) + (9 + 7 + 8 + 3 + (3 + 3 + 4 * 5))
        8 + ((6 * 7 * 8 * 2 * 4 * 8) + 3 + 7 + 7 * 3) * ((3 * 4 * 8 + 3 * 5 * 7) + 7 + 5 * 3 * (2 * 2 + 2))
        6 * (4 * 3 + 5 * 3 + 4 * 9)
        ((7 + 6 + 4 * 9) * 4) + (5 * 2) * (7 * 7) + 7
        (3 * 9 * 8) + (7 * 4 * 9 * 9 * 4 + 7) + 2
        9 * 9 * 9 * 5 + ((5 * 2) + 5 + 9 + 5 * 9)
        3 * ((9 + 3 * 3 * 5) * 6 * 2) + 2 + 3 * (3 + 2 * 8 * 6 + 5 + 4) * 8
        6 + (9 + (9 * 8 + 4 + 6 + 5) * (9 + 9 * 8 * 9 + 8)) * 4
        3 * (4 * 2 * (3 + 9 + 3 + 2 + 9) + (7 * 5 + 4)) * 6 + (2 * 6 * 4) + 3 * 3
        (6 + 4 + 3) * 2 * 8 * 7
        6 + 7 * 6 + (2 * 7 * (5 * 7) + 3)
        5 * ((9 + 3 * 5) + (6 * 8) * 9 + 3 + 8) + 4 + 7 * 6
        3 * 3 + ((7 * 6 + 9 + 6 + 4 * 9) + (4 + 8 + 2 * 9 * 3) * 6 * 4 + 4 * 8) * ((5 * 8 + 8) * 5 * 9 * 9 + (3 + 9 + 2 + 5 * 5 * 2) + (6 + 2 + 9 * 6)) + 7 + 2
        4 + 2 * 9 * 5 + 8 * (8 + 9 * 8 * 2 * 3)
        ((7 + 2 * 7 * 5) * (3 * 8 * 8 + 4 + 2) * 4 * 4 * 6 + 9) * 2 * (5 * 2 + 3 * 9) + 8 + 8
        9 * 4 * 3 + 6 + (6 + 3 * 9 * 5 + (6 + 2 + 3 * 8) * 8) + (7 * 6 * 2)
        8 + (6 * 7 + 7 + 9) + ((7 * 8 + 3 * 6 + 5) * 8) + 6
        (3 * 9 * 9 + 6) * 6 * 9 + 4
        3 * ((5 + 3 + 6 + 4 * 4 + 2) + 6 * 2) * 8
        7 * 8 * 3 * 4 * ((4 + 8 + 4) + 3 + 4 * (4 + 6 * 3 + 8 * 8) + 4 * 2)
        5 + (7 + 6 + 8 + 3 + (8 + 2 + 8 * 8 + 3)) + 7 * 4
        8 + 7 + 6 * 5
        8 * ((2 + 9 * 4 * 4 * 8 + 9) + 3 + 4 * (4 + 5 * 9 + 6 + 2 + 6))
        8 + (5 * 5 * 6 * (3 + 6 * 8) + (5 * 2 * 8 * 7)) + (6 * 4 * 2)
        5 + 5 + ((4 + 2 + 6 * 3 * 3 * 4) * (8 + 6) * 4 * 9 + 8 * 6)
        2 + (9 + (7 + 6) * 7 * 8) + 7 * (9 + 3 * (8 * 4 + 2) + 7 + 9) + 2
        9 * 6 + 5 + 9 + (8 * 6 + 4) * (5 * 4 + 7 * 2 * (3 + 8 * 7 + 4 + 6 + 5))
        3 * (9 + (2 * 9 + 6)) + 6 * 9
        (6 * 8 * 8 + 2) + (2 + 5 + 4) * 9 + 6
        3 * (5 + 4 * 5 + 8 * (2 * 3 * 4 * 6 * 6))
        8 + 2 + 7 * (2 + 6) + (2 * 2 * 5 * (7 + 8 * 6 * 2 * 8 + 3))
        3 * (7 * 5 * 9 * (2 * 5 * 8 + 2 * 3) * 7)
        7 * (9 + 7 * 5 + 2 * 7) * (6 * (6 + 5 * 2)) * 5 + 5 + 3
        (6 * (8 + 6 * 2 + 7) + 7 + (9 * 5 + 4 + 7 + 8) * (6 + 4 + 6 * 6 * 8)) * 2 * 9 + 7 + 6 * 4
        6 + (5 * 5 + 3 * 5 + 2 + 9) + 8
        3 + 3 + ((4 + 4 + 2 * 5 + 2) + 7) + 2 * 6
        2 + 9 + 8 + (6 * (4 + 2 + 8) + 2)
        8 + (7 + 8) * 2 + 9
        7 * 9 * 3 * (3 * 2 + 7 * 4)
        4 * (5 * 5 * 6 + 9 + 2)
        (6 * 6 * (3 + 4 * 6 + 7 * 6) + 5 * 9) * 3 * ((4 + 5 + 7 + 5) * 9 * (5 * 6 * 4 + 7 + 6 * 8) * 2 * 2) * ((9 + 7) * 4) + 7
        9 + 4 * ((3 * 9) + 6) + 8
        (6 * 9 + (5 + 3 * 2 * 7) + 8 * 3) + (7 + 9)
        9 * (5 * (7 * 9)) + 7
        8 * ((4 + 6 + 9) + 7 * 9 * 2 * 2 * 8) + 7 * (3 * 6 + 3 * 7) + (2 + 7 + (4 + 2 * 5 * 5 * 6 * 5)) * 2
        (9 + 2 * 5 * 9 * (9 * 7 * 9 * 6)) + (2 + 2 + (2 + 6 * 7 * 7) * 3 + 2) * ((4 * 7 + 2 + 5 * 6) + (6 * 8 + 9 * 7)) + (5 + 6 + 9 + 4 * 6)
        9 + 7 * 9 * (9 * (9 + 7 + 8) * 2 + 8 + 4 * 4) * (2 + 8 * 6 * 9 * 8 + 4) * 3
        ((7 + 6) * 5) + 8
        (2 + 9 + 6 * 3) + 9 * 5 * ((8 + 7 * 2) + 7) * 6 + 4
        (7 + 3 * 7 + 8 * 9) * 5 * 7
        2 + ((2 + 3) * 2) + 8 + 7
        2 * 4 + 5
        3 * ((9 * 8 * 6 + 3 * 9) + 9 * (3 * 5 * 8 * 6) * 5 * 4) + 2 + ((3 * 7 * 5 * 5 + 4 + 6) + 3 * 2 * 8)
        2 * 6 + 3 + (4 + 8 * 6) * 8
        5 * 9 + 7 + (8 + 6 + 2 + 9) + 3
        8 * 2 * 6 + (3 + (9 * 6 * 2 + 6 * 2 * 2) * (8 * 8 * 7 + 6)) * 4
        6 * 4 * 3 * 6 + (7 + 3 + 6)
        (7 * 3 * 9 * 7 * 4 * 3) * 5 + 7
        7 + 8 + 8 * 5 + (5 * 4 + 5 * (6 * 5 * 6) + 8)
        (2 + 3) * 8 + 2 * 8 * 7 * 2
        (6 + 5 + 5 + 7 * (4 + 3 * 2 * 2 * 8)) + 9 * 5 + 7
        2 + (9 + 3 * (8 + 6) + 8) * (3 * 6 + (3 * 3 * 3 + 2))
        7 * 8 + 2 + (3 * 3 * 4 * (2 + 9) * 9) * 7 + 2
        6 * 8 + 5 + 6 * (3 * 8 * (3 + 8 + 9 + 7)) * (4 + 5 + 9 * 5 + (8 + 4 + 7) + 5)
        ((7 * 4 + 4) * 7 * (5 + 3 * 2 + 4 * 6 * 5) * 2) * 7 * 9 * (5 * 4 + 6 + 2) + 9
        2 + 6
        3 + 5 * 8 * ((9 * 6 * 3 * 8 + 7) + 8)
        7 * 4 * 8
        (4 + 9 + 8 * 9 + 7 + 7) * 9
        2 * 2 * 2 * (2 * 6 * 3 * 5 + 9) + (2 * 8)
        ((6 + 8 * 9 * 2 + 9) + 2 + (3 + 2 * 3) + 2 + 8) + 8 * 8 + (4 + (3 * 8) * 9) * 3 + 5
        6 + 5 * 8 * 7 + 3 * 3
        9 * (6 * 2 * 5 + 5 * (2 + 6 * 7) * 2) * 9 + 7
        3 + (6 + 2 * 8 * 3 + (4 * 9)) + 8 + 4 * (5 + 6 + (3 + 9 + 9 + 4 + 3 * 9) * 5 + 2) + 7
        5 + 9 * (6 * 9 + (7 + 3 * 9) + 8) * 7
        8 * ((2 * 3 + 3 + 6 + 3 * 7) * 3) * 2
        5 + 2 + 8 + (2 + 5 * 7 + 9 + 2) * 3
        9 * 5 + 3 + (8 + 2)
        2 + 9 * (3 * (5 + 7) * 5 + 3) * ((8 * 5 + 4 * 7) + 6) + ((2 * 5) * 2 + 7) + 8
        5 + (4 * 9 + 7) + 9
        (4 + 8 * 3 + (2 * 5) + 8) + 2 + 2 * 4 * 2 * ((2 * 2) * (2 * 9 + 2) * 6)
        5 + ((4 * 2) * 2) * 3
        (8 * (3 + 4 * 9 + 9 + 4 * 5) + 3 + 5) + 3 * 4 + 2 * 9
        9 + (2 * 2) * 2 + (7 * 3 * 7 + 4) + 5
        5 + 6 * (6 + 6 * (4 + 5 * 5 * 3 * 4) * (8 * 9 + 4) * 7 * (8 + 8 + 9 + 3))
        3 * (5 + 3 + 7 * 9 + 3 + (3 * 5)) * 3 + (7 * 8 * 5)
        (2 * (4 * 5 + 5 + 9 + 9) * 5 + (9 * 6)) * 5 * 5 + 4 * 3 + (5 * 8)
        6 + (4 + 2 + 5 * (8 + 5 + 6 * 5 * 6 + 6)) + 5 + 5 + 8
        ((2 * 4 + 6 * 5) * (5 + 6) + 9 + 9) + 6 * 2 + 3 + 3 * 9
        2 + 7 * 2 * 4 * ((2 * 6 + 2 + 2 * 4) * 5) * 7
        9 * 3 + (4 * 4 + 4 * 9) * 7 * 2
        7 + 5 + 7 * (6 * 4 * 5 + 3 * 9)
        (9 * 7) * 3 + 2 * 8
        2 * 8 + 4 + 9 * 9
        5 + (7 + 4) + 8 + (4 + (4 + 8 * 4 * 2) + 7 + 5) + 9 * (3 * (5 * 8 * 7))
        5 + 5 + 9 + (6 * 9 + (9 + 3 * 9 * 3 * 3) * 4) * 9 * 7
        (4 * 7 * (9 * 7 + 3) * (8 + 3) * 3 * 9) * 9
        3 * (9 + 6 * (3 + 2 * 3) + 7 * 2) * 9 * 9
        2 * 9 + (4 + 9 + (3 * 9 * 8 * 5 * 9)) + (8 * 6 + 2 + 7 + 9) * 6 + 8
        (8 + 5 * 5 * 5) * 2 * 8 * (4 * 3 * 3) + 3
        7 * ((2 * 4) + 3 + (3 + 8 + 9 * 6) + 3 * 9 + 7)
        (2 * 7 + 7 * 8) * 3 * (3 * 7 * 9 * 9 * 5 + 2)
        (2 * (3 * 5 + 8)) * (8 * 4 + (6 + 2 * 2 + 7) + 3 + 2) * 9 + 3 + 4
        9 + (4 * 5 + 2 * 5 * (5 + 4 * 9 + 3)) + 9 + 9 * (4 + 4 * 8 + 4)
        8 + (2 * 4) + (8 + 4) * ((6 + 3 + 4 + 4 + 7) * (7 + 6 + 3 + 3 * 3 * 6)) * 6
        3 + 6 + (2 * 7 * 2 * 2) + 5
        ((2 + 7) * 9 + 5) * 5 + ((3 * 9) + (9 + 7 * 6) + (7 + 4 + 7 + 4) + 7) * 3
        5 + 2 * 5 * 9 + (6 + 7 + 8 + (2 + 3 + 6 + 6 * 6 * 7) * 8 + 6) * 4
        3 + (4 * 2 * 7 + 8) * 5
        2 + 9 + 3 + 2 * 3
        (5 + (5 + 7 * 5 + 6 + 5) * 3 * 3 * 8) * 4
        3 * 9 * 7 + (8 * 8 * (4 + 5) + 4 * 2) * (7 + 8 * 4 + 5 + 2 * 2)
        (3 + 6 + (7 + 6 * 2 + 2 * 6 + 5) + 8 + (5 * 7 + 5 + 9)) + 2 + (2 + (2 + 3 * 3 + 2 * 9) * (4 + 9 * 7 + 3) + (5 * 9 + 6 * 3 + 3 + 9) + 8) * 4 * 8
        (6 * 8 * 9 + 3 * 4) * 5
        6 * 9 * 7 * 2 * (7 + 4 + (5 + 6 + 7 * 4 * 3) * (2 + 7 + 2 * 6) * 8)
        9 * (8 + 4 + 6 * (8 * 8 * 4) * (8 * 2 + 4) * 8) * 2
        6 * ((2 + 6 * 7 + 5) + 2 * 4 + 6 * 8 * 4) * 2 + 4 + (4 * 2 * 3 + 9 + 3 * 6) + 4
        9 * (6 * 5 + (7 * 8) * (2 + 7 * 3 + 3 + 4 * 6)) + 6 * 5 * 6 + 9
        9 * (7 + 4 * 6 * 4) + 3 * ((9 * 5 + 4) + (8 + 8 + 6 + 2 + 3 + 7)) + 8 * 9
        (6 + 6 + 2 + 3) * (3 * 3 + 3 * (9 + 8 + 4) + (8 * 8 + 2 * 4 * 3))
        9 + ((7 * 7 + 9 * 3) * 4 + 4 + 3) + 8 * 6 * (2 * (2 * 9 * 8 * 2 + 3 + 2) + 3 * 3 * (6 * 8 + 3 * 3))
        (7 * 4 * 6) * (5 * 5) + 8 * 7 * 5
        ((5 + 9 + 6 + 5 + 4) + 6 * 9 + 5 + 4) * 2 * 4 * 8 + (7 + 5 * 5 * (8 + 6 + 9 + 7 * 6 + 8) * 3)
        9 * ((4 + 6) + 2 + 5)
        (5 + 6) * (2 + (9 * 5 + 9) * (9 + 6 * 3 + 4 * 5 * 7) + (6 + 8)) + ((8 + 2 + 5) + 5 + 5 + 8) + (4 + (8 * 3 + 5 + 3 + 8 + 6) * (8 * 3 + 5 * 7 * 8) * 3 + 7 * 7) + 8 + 6
        6 + 6 + (4 + (4 * 6 * 3) + 2 + 5 * 4) * 6
        4 + (8 * 3 + (6 + 2)) * (6 + 8 + 7 + 2 * 4 * 9) * (5 + (5 * 4 * 3 + 7 + 7 * 8) + 8 * (9 * 5 * 9) + 9) + (4 + 8 + 4 + 8) + (9 * 9 + 8 * 3)
        (5 * 2 * 8 * 3) * 5 + 5 + 8 + 9
        6 * ((4 * 3 + 2 * 5 * 4 * 6) + 4) + 3 * 6
        9 * 5 + (9 + 7)
        8 * 2 * 5 * 6 + (6 * 3 * 5 + 4 * (4 * 4 * 4 * 2 + 6) + 4)
        6 + (3 + 7 + 8 + 8) * 9 * 6
        2 + 5 * ((4 * 2 + 6) * 5 * (6 * 2 + 4 * 8 * 6) + 8) * 8 + 6
        4 + 5 * ((4 + 2) + 3 + 5 + (4 + 5 * 3 * 6 + 6) * (5 + 9 + 9 + 6 * 4 + 7) + 8) * 5 * 5
        6 * (5 + 4 + (3 + 3 * 3 * 8 * 3) * (2 + 3 * 2 * 2) * 5 + 7) + 2 * 2 * 6 + 9
        ((3 + 8 * 7 + 3 + 3 + 3) + 3 + 8) * 5
        4 + 9 + (9 + 5 * 4 * 8 * 2 + 4)
        5 * (4 + 8 + 9 * 5) * ((6 * 9 * 9 + 2 * 5 * 8) * 9 * 2 + (9 * 3 + 4 + 7 + 3 + 2) * (6 * 7 * 5 + 2 * 9 * 2) + (7 * 9 * 4 * 2 * 3)) + 9
        7 * 6 + (4 * 4 + (7 * 9 * 6) * (9 + 7) + 5 + 6)
        8 + (5 + 4 + 9) + 7 * (5 * 8 + 3 * 5) * 9
        8 + (6 + 9 * 8 * 8) + (9 + 7 * 9 + 5 * 7 + 3)
        4 + (6 * 6) * 6 + 2 + 4
        (9 * 2 + 3) + 4 + 6 + 7 * (2 * 4 + 8 + 5) * 4
        5 * 6 + 9 + 7 + 3 * 2
        5 * 3 * 5 * ((9 + 8 + 9 + 3) + 6 * (9 * 4 * 2 + 5) * (9 + 9 * 3 + 4))
        5 * (3 * (7 + 7 + 8 + 2 * 7 * 9) + 5 + 9) + ((9 * 5 + 4) * 7 * 8 + 3) * 7 + (3 * 8 * (4 + 6 * 2 * 3 + 7 * 8) * 7 * (7 + 4) * 5)
        5 * (8 + 3 * 6 * 2) * 9 + 6 * 2 * 5
        6 * 4 * 2 + 5 * (9 + 4 * 8 * 3 + 8)
        4 * ((6 + 5 + 9 * 9) * 6 * (9 + 7 + 2 * 6 + 2) + 2 + (5 * 4 * 4) + 5)
        (8 * (9 * 2 * 4 + 5) * 4 + 9 * 8 * (3 * 6 * 9 + 3 * 8)) * 4 + 5
        (5 + (3 * 7 * 8 + 6)) * 4
        (4 + 5) + 8
        8 * 8 * (2 * (7 * 5 + 7) * 4 + 8) + 2 * 8
        5 * 9 * (6 * 4 * 6) * 7 * 9 + 2
        2 + ((5 * 4) + 5 + (8 * 9 * 9 + 2 + 9 * 9) + (8 + 4 * 2 + 6) + 8)
        (6 * 2) * 4 + 4 * (8 * 5 + 3 + (3 * 5 + 7 + 3 + 5 * 5)) * 2 + 5
        3 * 8 + 3 + (6 * (3 * 7 * 4 + 8) * (6 * 2 * 8) + 6 + (5 * 2) * 8) + 7
        2 * 8 + 6 * 4 + (5 + (9 * 3 * 4 * 2)) * (4 + 6 * 9 * 8 * 7 + 4)
        7 + 6 * (4 * (2 + 8 + 5 * 8 + 3)) + 4 + 2
        ((3 + 8 + 3 * 6) + (2 + 5 * 7) * 4 + 6 + 7) + (2 + 3 * 6 * (7 + 2 + 7)) * 6 + 2
        8 + 4 * 9 * 3 + (5 * 2 * (9 * 3 * 2)) * 6
        6 + 7 * (8 + 5 + (2 + 3)) + 5 * 5 + 9
        5 * ((6 + 3 * 3 + 6 + 2) + (8 * 9 * 9) + 7)
        3 + (7 * (3 + 7 + 7 * 3 * 4) + 5 * 7 * (8 + 4 + 6 * 9)) * 2 * 7
        (9 * 6 * (4 * 9 + 6 * 6)) + 8 * (5 + 8 + 5 + 4 * 2 + 3)
        3 * (8 + 8 + 7) * (7 * 2 + 4) + (7 + 9)
        ((9 * 5 + 6 + 9) + 9 + 8) + 3 + 9 * 6 * 8
        ((8 + 5 * 2) + 4 + 8) + (2 * 5)
        (6 + 6 * 8) + 4 * 3 + (8 * 2 + 2 * 3) * (7 * (8 * 4)) * 9
        6 * (9 * 5 + 5 * 3) + 8 + ((8 + 3) * (3 + 5 * 7 + 9 * 9 + 2)) + 6 + 2
        (7 * 7) * ((3 * 7) + 9 + 4) + (4 * 9 * 8 * 6 * (2 + 4 * 4)) + 5
        4 * 3 + 6 * 8 * 5 * (4 * 7 + (5 + 5 + 5 + 3 + 5))
        (2 + 6 + (6 * 5 + 4 * 8) * 3 + 2) + 6 + 3
        (4 * 5 * 7 * 6 + 6 + (2 * 8 * 6 + 2 + 9)) + 4 + 7
        9 * 4 * 5 + 2
    "};
}
